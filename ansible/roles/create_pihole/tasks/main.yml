---
- name: Run Setup
  ansible.builtin.setup:
    gather_subset:
      - all_ipv4_addresses
      - os_family

- name: Fix Proxy
  ansible.builtin.lineinfile:
    path: /etc/environment
    regexp: "^{{ replacement_string }}="
    line: "{{ replacement_string }}=http://{{ proxy_server }}:{{ proxy_port }}/"
  with_items:
    - http_proxy
    - https_proxy
    - HTTP_PROXY
    - HTTPS_PROXY
  loop_control:
    loop_var: replacement_string


- name: Create PiHole install folders
  ansible.builtin.file:
    path: /etc/pihole
    state: directory
    recurse: true

- name: Create Setup Vars
  ansible.builtin.template:
    src: setupVars.conf.j2
    dest: /etc/pihole/setupVars.conf

- name: Download Pi-Hole
  ansible.builtin.get_url:
    url: https://install.pi-hole.net
    dest: /tmp/install_pi.sh
    mode: 0755

- name: Install Pi-Hole
  ansible.builtin.shell: PIHOLE_SKIP_OS_CHECK=true /tmp/install_pi.sh --unattended

- name: Deploy conditional forwarding
  ansible.builtin.copy:
    src: 99-local.conf
    dest: /etc/dnsmasq.d/99-local.conf
  notify: Restart Pi-Hole

- name: Apply rate limit fix
  ansible.builtin.lineinfile:
    path: /etc/pihole/pihole-FTL.conf
    regex: RATE_LIMIT
    line: RATE_LIMIT=0/0
  notify: Restart Pi-Hole

- name: Create daily update cronjobs
  ansible.builtin.cron:
    name: "Daily Update ({{ job.type }})"
    minute: "0"
    hour: "{{ job.hour }}"
    job: "{{ job.job }}"
  with_items:
    - type: Gravity
      hour: 1
      job: PIHOLE_SKIP_OS_CHECK=true /usr/local/bin/pihole -g
    - type: Package
      hour: 0
      job: PIHOLE_SKIP_OS_CHECK=true /usr/local/bin/pihole -up
  loop_control:
    loop_var: job
    label: "{{ job.type }}"

- name: Setup Firewall
  ansible.builtin.include_tasks: setup_firewall.yml